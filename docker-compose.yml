# version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - netsentenial_network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - netsentenial_network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:29092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - netsentenial_network

  zeek:
    build:
      context: ./zeek
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./zeek/zeek-config/node.cfg:/usr/local/zeek/etc/node.cfg
      - ./zeek/zeek-config/zeekctl.cfg:/usr/local/zeek/etc/zeekctl.cfg
      - ./zeek/zeek-config/local.zeek:/usr/local/zeek/share/zeek/site/local.zeek
    environment:
      LD_LIBRARY_PATH: "/usr/local/lib"
    networks:
      - netsentenial_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - netsentenial_network
    volumes:
      - /Users/bkpandey/.kube/config:/root/.kube/config
      - ./config-for-compose.yaml:/app/config.yaml
      - ./models:/app/models
      - ./data:/app/data
    command: ["sh", "-c", "/wait-for-it.sh kafka:29092 -- python app/run.py"]
  
  ngrok:
    image: wernight/ngrok
    environment:
      - NGROK_AUTHTOKEN=2m7FVIePrGO5njNAXC5Wy4c40f2_5pv58J8wbsgjYV7WHZW6T
    command: ngrok http --log=stdout --domain=newly-advanced-dane.ngrok-free.app app:5000
    depends_on:
      - app
    networks:
      - netsentenial_network

  create_mock_data:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - netsentenial_network
    volumes:
      - ./config-for-compose.yaml:/app/config.yaml
      - ./models:/app/models
      - ./data:/app/data
    command: ["sh", "-c", "/wait-for-it.sh kafka:29092 -- python scripts/create_mock_data.py"]

  process_mock_data:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - netsentenial_network
    volumes:
      - ./config-for-compose.yaml:/app/config.yaml
      - ./models:/app/models
      - ./data:/app/data
    command: ["sh", "-c", "/wait-for-it.sh kafka:29092 -- python scripts/process_mock_data.py"]

  prediction_service:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - netsentenial_network
    volumes:
      - ./config-for-compose.yaml:/app/config.yaml
      - ./models:/app/models
      - ./data:/app/data
    command: ["sh", "-c", "/wait-for-it.sh kafka:29092 -- python scripts/prediction_service.py"]

networks:
  netsentenial_network:
    driver: bridge
